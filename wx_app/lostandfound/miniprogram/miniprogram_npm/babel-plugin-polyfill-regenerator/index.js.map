{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _helperDefinePolyfillProvider = _interopRequireDefault(require(\"@babel/helper-define-polyfill-provider\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst runtimeCompat = \"#__secret_key__@babel/runtime__compatibility\";\nvar _default = (0, _helperDefinePolyfillProvider.default)(({\n  debug,\n  targets,\n  babel\n}, options) => {\n  if (!shallowEqual(targets, babel.targets())) {\n    throw new Error(\"This plugin does not use the targets option. Only preset-env's targets\" + \" or top-level targets need to be configured for this plugin to work.\" + \" See https://github.com/babel/babel-polyfills/issues/36 for more\" + \" details.\");\n  }\n  const {\n    [runtimeCompat]: {\n      moduleName = null,\n      useBabelRuntime = false\n    } = {}\n  } = options;\n  return {\n    name: \"regenerator\",\n    polyfills: [\"regenerator-runtime\"],\n    usageGlobal(meta, utils) {\n      if (isRegenerator(meta)) {\n        debug(\"regenerator-runtime\");\n        utils.injectGlobalImport(\"regenerator-runtime/runtime.js\");\n      }\n    },\n    usagePure(meta, utils, path) {\n      if (isRegenerator(meta)) {\n        let pureName = \"regenerator-runtime\";\n        if (useBabelRuntime) {\n          var _ref;\n          const runtimeName = (_ref = moduleName != null ? moduleName : path.hub.file.get(\"runtimeHelpersModuleName\")) != null ? _ref : \"@babel/runtime\";\n          pureName = `${runtimeName}/regenerator`;\n        }\n        path.replaceWith(utils.injectDefaultImport(pureName, \"regenerator-runtime\"));\n      }\n    }\n  };\n});\nexports.default = _default;\nconst isRegenerator = meta => meta.kind === \"global\" && meta.name === \"regeneratorRuntime\";\nfunction shallowEqual(obj1, obj2) {\n  return JSON.stringify(obj1) === JSON.stringify(obj2);\n}"]}