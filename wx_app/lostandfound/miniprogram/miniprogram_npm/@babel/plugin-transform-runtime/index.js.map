{"version":3,"sources":["index.js","helpers.js","get-runtime-path/index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\nvar _helperModuleImports = require(\"@babel/helper-module-imports\");\nvar _core = require(\"@babel/core\");\nvar _helpers = require(\"./helpers.js\");\nvar _index = require(\"./get-runtime-path/index.js\");\nvar _index2 = require(\"./babel-7/index.cjs\");\nvar _default = exports.default = (0, _helperPluginUtils.declare)((api, options, dirname) => {\n  api.assertVersion(7);\n  const {\n    version: runtimeVersion = \"7.0.0-beta.0\",\n    absoluteRuntime = false,\n    moduleName = null\n  } = options;\n  if (typeof absoluteRuntime !== \"boolean\" && typeof absoluteRuntime !== \"string\") {\n    throw new Error(\"The 'absoluteRuntime' option must be undefined, a boolean, or a string.\");\n  }\n  if (typeof runtimeVersion !== \"string\") {\n    throw new Error(`The 'version' option must be a version string.`);\n  }\n  if (moduleName !== null && typeof moduleName !== \"string\") {\n    throw new Error(\"The 'moduleName' option must be null or a string.\");\n  }\n  {\n    const DUAL_MODE_RUNTIME = \"7.13.0\";\n    var supportsCJSDefault = (0, _helpers.hasMinVersion)(DUAL_MODE_RUNTIME, runtimeVersion);\n  }\n  if (hasOwnProperty.call(options, \"useBuiltIns\")) {\n    if (options[\"useBuiltIns\"]) {\n      throw new Error(\"The 'useBuiltIns' option has been removed. The @babel/runtime \" + \"module now uses builtins by default.\");\n    } else {\n      throw new Error(\"The 'useBuiltIns' option has been removed. Use the 'corejs'\" + \"option to polyfill with `core-js` via @babel/runtime.\");\n    }\n  }\n  if (hasOwnProperty.call(options, \"polyfill\")) {\n    if (options[\"polyfill\"] === false) {\n      throw new Error(\"The 'polyfill' option has been removed. The @babel/runtime \" + \"module now skips polyfilling by default.\");\n    } else {\n      throw new Error(\"The 'polyfill' option has been removed. Use the 'corejs'\" + \"option to polyfill with `core-js` via @babel/runtime.\");\n    }\n  }\n  ;\n  {\n    const {\n      useESModules = false\n    } = options;\n    if (typeof useESModules !== \"boolean\" && useESModules !== \"auto\") {\n      throw new Error(\"The 'useESModules' option must be undefined, or a boolean, or 'auto'.\");\n    }\n    var esModules = useESModules === \"auto\" ? api.caller(caller => !!(caller != null && caller.supportsStaticESM)) : useESModules;\n  }\n  {\n    var {\n      helpers: useRuntimeHelpers = true\n    } = options;\n    if (typeof useRuntimeHelpers !== \"boolean\") {\n      throw new Error(\"The 'helpers' option must be undefined, or a boolean.\");\n    }\n  }\n  const HEADER_HELPERS = new Set([\"interopRequireWildcard\", \"interopRequireDefault\"]);\n  return {\n    name: \"transform-runtime\",\n    inherits: _index2.createPolyfillPlugins(options, runtimeVersion, absoluteRuntime),\n    pre(file) {\n      if (!useRuntimeHelpers) return;\n      let modulePath;\n      file.set(\"helperGenerator\", name => {\n        var _ref;\n        modulePath != null ? modulePath : modulePath = (0, _index.default)((_ref = moduleName != null ? moduleName : file.get(\"runtimeHelpersModuleName\")) != null ? _ref : \"@babel/runtime\", dirname, absoluteRuntime);\n        {\n          if (!(file.availableHelper != null && file.availableHelper(name, runtimeVersion))) {\n            if (name === \"regeneratorRuntime\") {\n              return _core.types.arrowFunctionExpression([], _core.types.identifier(\"regeneratorRuntime\"));\n            }\n            return;\n          }\n        }\n        const blockHoist = HEADER_HELPERS.has(name) && !(0, _helperModuleImports.isModule)(file.path) ? 4 : undefined;\n        let helperPath = `${modulePath}/helpers/${esModules && file.path.node.sourceType === \"module\" ? \"esm/\" + name : name}`;\n        if (absoluteRuntime) helperPath = (0, _index.resolveFSPath)(helperPath);\n        return addDefaultImport(helperPath, name, blockHoist, true);\n      });\n      const cache = new Map();\n      function addDefaultImport(source, nameHint, blockHoist, isHelper = false) {\n        const cacheKey = (0, _helperModuleImports.isModule)(file.path);\n        const key = `${source}:${nameHint}:${cacheKey || \"\"}`;\n        let cached = cache.get(key);\n        if (cached) {\n          cached = _core.types.cloneNode(cached);\n        } else {\n          cached = (0, _helperModuleImports.addDefault)(file.path, source, {\n            importedInterop: isHelper && supportsCJSDefault ? \"compiled\" : \"uncompiled\",\n            nameHint,\n            blockHoist\n          });\n          cache.set(key, cached);\n        }\n        return cached;\n      }\n    }\n  };\n});\n\n//# sourceMappingURL=index.js.map\n","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasMinVersion = hasMinVersion;\nvar _semver = require(\"semver\");\nfunction hasMinVersion(minVersion, runtimeVersion) {\n  if (!runtimeVersion) return true;\n  if (_semver.valid(runtimeVersion)) runtimeVersion = `^${runtimeVersion}`;\n  return !_semver.intersects(`<${minVersion}`, runtimeVersion) && !_semver.intersects(`>=8.0.0`, runtimeVersion);\n}\n\n//# sourceMappingURL=helpers.js.map\n","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.resolveFSPath = resolveFSPath;\nvar _path = require(\"path\");\nrequire(\"module\");\nfunction _default(moduleName, dirname, absoluteRuntime) {\n  if (absoluteRuntime === false) return moduleName;\n  return resolveAbsoluteRuntime(moduleName, _path.resolve(dirname, absoluteRuntime === true ? \".\" : absoluteRuntime));\n}\nfunction resolveAbsoluteRuntime(moduleName, dirname) {\n  try {\n    return _path.dirname((((v, w) => (v = v.split(\".\"), w = w.split(\".\"), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, \"8.9\") ? require.resolve : (r, {\n      paths: [b]\n    }, M = require(\"module\")) => {\n      let f = M._findPath(r, M._nodeModulePaths(b).concat(b));\n      if (f) return f;\n      f = new Error(`Cannot resolve module '${r}'`);\n      f.code = \"MODULE_NOT_FOUND\";\n      throw f;\n    })(`${moduleName}/package.json`, {\n      paths: [dirname]\n    })).replace(/\\\\/g, \"/\");\n  } catch (err) {\n    if (err.code !== \"MODULE_NOT_FOUND\") throw err;\n    throw Object.assign(new Error(`Failed to resolve \"${moduleName}\" relative to \"${dirname}\"`), {\n      code: \"BABEL_RUNTIME_NOT_FOUND\",\n      runtime: moduleName,\n      dirname\n    });\n  }\n}\nfunction resolveFSPath(path) {\n  return require.resolve(path).replace(/\\\\/g, \"/\");\n}\n\n//# sourceMappingURL=index.js.map\n"]}